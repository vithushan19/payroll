/* eslint-disable @typescript-eslint/no-misused-promises */
import moment, { Moment } from "moment";
import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { HTMLInputTypeAttribute, useCallback, useEffect } from "react";
import { useState } from "react";

import Datetime from "react-datetime";

type Shift = {
  id: string;
  created_at: string;
  start_time: string;
  break_minutes: number;
  end_time: string;
};
const Home: NextPage = () => {
  const { data: session, status } = useSession();
  const [data, setData] = useState<Shift[]>([]);
  const fetchData = async () => {
    const BASE_URL = process.env.NEXTAUTH_URL ?? "";

    const response = await fetch(`${BASE_URL}/api/shifts/getShifts`, {
      method: "POST",
      body: JSON.stringify({
        userId: session?.user?.id,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
    const newData = (await response.json()) as Shift[];
    setData(newData);
  };

  useEffect(() => {
    void fetchData();
  }, [session?.user?.id]);

  function getHours(shift: Shift) {
    const SECS_IN_A_MIN = 60;
    const MS_IN_A_SEC = 1000;
    const MIN_IN_HOUR = 60;
    const diff =
      moment(shift.end_time).diff(moment(shift.start_time)) /
      SECS_IN_A_MIN /
      MS_IN_A_SEC;
    const hours = (diff - shift.break_minutes) / MIN_IN_HOUR;
    const mins = (diff - shift.break_minutes) % MIN_IN_HOUR;

    return `${hours}:${mins.toString().padStart(2, "0")}`;
  }

  async function onDelete(shiftId: string) {
    const BASE_URL = process.env.NEXTAUTH_URL ?? "";
    await fetch(`${BASE_URL}/api/shifts/deleteShift`, {
      method: "POST",
      body: JSON.stringify({
        id: shiftId,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    }).then((res) => fetchData());
  }
  return (
    <>
      <Head>
        <title>Payroll App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            <span className="text-[hsl(280,100%,70%)]">My</span> Shifts
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-1 md:gap-8">
            {data.map((shift, i) => (
              <div
                key={i}
                className="grid grid-cols-2 rounded-xl bg-purple-700 p-4 text-white"
              >
                <p>Created At</p>
                <p>{moment(shift.created_at).format("LLLL")}</p>
                <p>Start Time</p>
                <p>{moment(shift.start_time).format("LLLL")}</p>
                <p>End Time</p>
                <p>{moment(shift.end_time).format("LLLL")}</p>
                <p>Break (minutes)</p>
                <p>{shift.break_minutes}</p>
                <p className="font-bold">Hours</p>
                <p>{getHours(shift)}</p>
                <div
                  onClick={() => onDelete(shift.id)}
                  className="mt-4 flex w-24 cursor-pointer justify-center rounded-xl bg-red-500 p-2 hover:bg-red-600"
                >
                  Delete
                </div>
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

type NumberInputProps = {
  label: string;
  value: number;
  setValue: (m: number) => void;
};

type InputProps = {
  label: string;
  value: Moment;
  setValue: (m: Moment) => void;
};
function NumberInput({ label, value, setValue }: NumberInputProps) {
  return (
    <div>
      <p className="font-bold text-white">{label}</p>
      <input
        className="rounded-xl p-4"
        value={value}
        type={"number"}
        placeholder={`Enter ${label}`}
        onChange={(e) => setValue(Number.parseInt(e.target.value))}
      />
    </div>
  );
}

function DateInput({ label, value, setValue }: InputProps) {
  return (
    <div>
      <p className="font-bold text-white">{label}</p>
      <Datetime
        className="p-4"
        value={value}
        onChange={(e) => setValue(e as Moment)}
      />
    </div>
  );
}

export default Home;
