/* eslint-disable @typescript-eslint/no-misused-promises */
import moment, { Moment } from "moment";
import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { HTMLInputTypeAttribute, useCallback, useEffect } from "react";
import { useState } from "react";
import DatePicker from "react-date-picker/dist/entry.nostyle";

import Datetime from "react-datetime";
import Navbar from "../components/Navbar";
import { AdminView, Shift, UserWithShifts } from "./api/admin/getAdminView";

const Home: NextPage = () => {
  enum DAYS {
    SUNDAY,
    SATURDAY,
    FRIDAY,
    THURDAY,
    WEDNESDAY,
    TUESDAY,
    MONDAY,
  }
  const { data: session, status } = useSession();
  const [data, setData] = useState<UserWithShifts[]>([]);
  const fetchData = async () => {
    const BASE_URL = process.env.NEXTAUTH_URL ?? "";

    const response = await fetch(`${BASE_URL}/api/admin/getAdminView`);
    const newData: AdminView = (await response.json()) as AdminView;
    console.log(newData);

    setData(newData.userShifts);
  };

  useEffect(() => {
    void fetchData();
  }, [session?.user?.id]);

  function getHours(shift: Shift | undefined) {
    if (!shift) {
      return "";
    }
    const MIN_IN_HOUR = 60;

    const workingMinutes = getWorkingMinutes(shift);
    const hours = workingMinutes / MIN_IN_HOUR;
    const mins = workingMinutes % MIN_IN_HOUR;

    return `${hours}:${mins.toString().padStart(2, "0")}`;
  }

  function getWorkingMinutes(shift: Shift | undefined) {
    const SECS_IN_A_MIN = 60;
    const MS_IN_A_SEC = 1000;
    const diff =
      moment(shift?.end_time).diff(moment(shift?.start_time)) /
      SECS_IN_A_MIN /
      MS_IN_A_SEC;

    return diff - (shift?.break_minutes ?? 0);
  }

  function getTotalHours(shifts: Shift[]) {
    const minutes = shifts.reduce(function (accumVariable, curValue) {
      return getWorkingMinutes(curValue) + accumVariable;
    }, 0);
    const MIN_IN_HOUR = 60;

    const hours = minutes / MIN_IN_HOUR;
    const mins = minutes % MIN_IN_HOUR;

    return `${hours}:${mins.toString().padStart(2, "0")}`;
  }

  async function onDelete(shiftId: string) {
    const BASE_URL = process.env.NEXTAUTH_URL ?? "";
    await fetch(`${BASE_URL}/api/shifts/deleteShift`, {
      method: "POST",
      body: JSON.stringify({
        id: shiftId,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    }).then((res) => fetchData());
  }
  const headers = [
    "Name",
    moment()
      .add(moment().day() - ((moment().day() + DAYS.MONDAY) % 7), "d")
      .format("ddd MMM DD"),
    moment()
      .add(moment().day() - ((moment().day() + DAYS.TUESDAY) % 7), "d")
      .format("ddd MMM DD"),
    moment()
      .add(moment().day() - ((moment().day() + DAYS.WEDNESDAY) % 7), "d")
      .format("ddd MMM DD"),
    moment()
      .add(moment().day() - ((moment().day() + DAYS.THURDAY) % 7), "d")
      .format("ddd MMM DD"),
    moment()
      .add(moment().day() - ((moment().day() + +DAYS.FRIDAY) % 7), "d")
      .format("ddd MMM DD"),
    moment()
      .add(moment().day() - ((moment().day() + DAYS.SATURDAY) % 7), "d")
      .format("ddd MMM DD"),
    moment()
      .add(moment().day() - (moment().day() + (DAYS.SUNDAY % 7)), "d")
      .format("ddd MMM DD"),
    "Total Hours",
  ];

  function getLastShiftForWeekday(shifts: Shift[], day: DAYS) {
    const dateToSearch = moment().add(
      moment().day() - (moment().day() + (day % 7)),
      "d"
    );
    const shift = shifts.find((shift) =>
      moment(shift.start_time).isSame(dateToSearch, "date")
    );
    return shift;
  }
  return (
    <>
      <Head>
        <title>Payroll App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />

      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            <span className="text-[hsl(280,100%,70%)]">Admin</span> Portal
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-1 md:gap-8">
            <div className="hidden grid-cols-9 rounded-xl bg-purple-900 p-4 text-white sm:grid">
              {headers.map((header, i) => (
                <p className="w-40 font-bold" key={i}>
                  {header}
                </p>
              ))}
            </div>

            {data &&
              data.map((user, i) => (
                <div
                  key={i}
                  className="grid grid-cols-1 rounded-xl bg-purple-700 p-4 text-white sm:grid-cols-9"
                >
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[0]}: </span>
                    {user.name}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[1]}: </span>

                    {getHours(getLastShiftForWeekday(user.shifts, DAYS.MONDAY))}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[2]}: </span>

                    {getHours(
                      getLastShiftForWeekday(user.shifts, DAYS.TUESDAY)
                    )}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[3]}: </span>

                    {getHours(
                      getLastShiftForWeekday(user.shifts, DAYS.WEDNESDAY)
                    )}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[4]}: </span>

                    {getHours(
                      getLastShiftForWeekday(user.shifts, DAYS.THURDAY)
                    )}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[5]}: </span>

                    {getHours(getLastShiftForWeekday(user.shifts, DAYS.FRIDAY))}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[6]}: </span>

                    {getHours(
                      getLastShiftForWeekday(user.shifts, DAYS.SATURDAY)
                    )}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[7]}: </span>

                    {getHours(getLastShiftForWeekday(user.shifts, DAYS.SUNDAY))}
                  </p>
                  <p className="">
                    <span className="font-bold sm:hidden">{headers[8]}: </span>
                    {getTotalHours(user.shifts)}
                  </p>
                </div>
              ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
